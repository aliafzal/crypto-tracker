{"ast":null,"code":"/*!\n * chartjs-chart-matrix v1.0.0\n * https://chartjs-chart-matrix.pages.dev/\n * (c) 2021 Jukka Kurkela\n * Released under the MIT license\n */\nimport { DatasetController, Element } from 'chart.js';\nimport { isObject } from 'chart.js/helpers';\nvar version = \"1.0.0\";\n\nclass MatrixController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const me = this;\n    const meta = me._cachedMeta;\n    me.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(rects, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const {\n      xScale,\n      yScale\n    } = me._cachedMeta;\n    const firstOpts = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(mode, rects[start], firstOpts);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = !reset && me.getParsed(i);\n      const x = reset ? xScale.getBasePixel() : xScale.getPixelForValue(parsed.x);\n      const y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(parsed.y);\n      const options = me.resolveDataElementOptions(i, mode);\n      const {\n        width,\n        height,\n        anchorX,\n        anchorY\n      } = options;\n      const properties = {\n        x: anchorX === 'left' ? x : x - width / (anchorX === 'right' ? 1 : 2),\n        y: anchorY === 'top' ? y : y - height / (anchorY === 'bottom' ? 1 : 2),\n        width,\n        height,\n        options\n      };\n      me.updateElement(rects[i], i, properties, mode);\n    }\n\n    me.updateSharedOptions(sharedOptions, mode);\n  }\n\n  draw() {\n    const me = this;\n    const data = me.getMeta().data || [];\n    let i, ilen;\n\n    for (i = 0, ilen = data.length; i < ilen; ++i) {\n      data[i].draw(me._ctx);\n    }\n  }\n\n}\n\nMatrixController.id = 'matrix';\nMatrixController.version = version;\nMatrixController.defaults = {\n  dataElementType: 'matrix',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'width', 'height']\n    }\n  },\n  anchorX: 'center',\n  anchorY: 'center'\n};\nMatrixController.overrides = {\n  interaction: {\n    mode: 'nearest',\n    intersect: true\n  },\n  scales: {\n    x: {\n      type: 'linear',\n      offset: true\n    },\n    y: {\n      type: 'linear',\n      reverse: true\n    }\n  }\n};\n/**\n * Helper function to get the bounds of the rect\n * @param {MatrixElement} rect the rect\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the rect\n * @private\n */\n\nfunction getBounds(rect, useFinalPosition) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n  return {\n    left: x,\n    top: y,\n    right: x + width,\n    bottom: y + height\n  };\n}\n\nfunction limit(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nfunction parseBorderWidth(rect, maxW, maxH) {\n  const value = rect.options.borderWidth;\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = +value.top || 0;\n    r = +value.right || 0;\n    b = +value.bottom || 0;\n    l = +value.left || 0;\n  } else {\n    t = r = b = l = +value || 0;\n  }\n\n  return {\n    t: limit(t, 0, maxH),\n    r: limit(r, 0, maxW),\n    b: limit(b, 0, maxH),\n    l: limit(l, 0, maxW)\n  };\n}\n\nfunction boundingRects(rect) {\n  const bounds = getBounds(rect);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(rect, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b\n    }\n  };\n}\n\nfunction inRange(rect, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const bounds = !rect || skipX && skipY ? false : getBounds(rect, useFinalPosition);\n  return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nclass MatrixElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.width = undefined;\n    this.height = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const options = this.options;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n      ctx.fillStyle = options.borderColor;\n      ctx.fill('evenodd');\n    } else {\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fillRect(inner.x, inner.y, inner.w, inner.h);\n    }\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n\n  tooltipPosition() {\n    return this.getCenterPoint();\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nMatrixElement.id = 'matrix';\nMatrixElement.defaults = {\n  backgroundColor: undefined,\n  borderColor: undefined,\n  borderWidth: undefined,\n  anchorX: undefined,\n  anchorY: undefined,\n  width: 20,\n  height: 20\n};\nexport { MatrixController, MatrixElement };","map":{"version":3,"sources":["/Users/aliafzal/React Apps/realtime-crypto/node_modules/chartjs-chart-matrix/dist/chartjs-chart-matrix.esm.js"],"names":["DatasetController","Element","isObject","version","MatrixController","initialize","enableOptionSharing","update","mode","me","meta","_cachedMeta","updateElements","data","length","rects","start","count","reset","xScale","yScale","firstOpts","resolveDataElementOptions","sharedOptions","getSharedOptions","i","parsed","getParsed","x","getBasePixel","getPixelForValue","y","options","width","height","anchorX","anchorY","properties","updateElement","updateSharedOptions","draw","getMeta","ilen","_ctx","id","defaults","dataElementType","animations","numbers","type","overrides","interaction","intersect","scales","offset","reverse","getBounds","rect","useFinalPosition","getProps","left","top","right","bottom","limit","value","min","max","Math","parseBorderWidth","maxW","maxH","borderWidth","t","r","b","l","boundingRects","bounds","border","outer","w","h","inner","inRange","skipX","skipY","MatrixElement","constructor","cfg","undefined","Object","assign","ctx","save","beginPath","clip","fillStyle","backgroundColor","fill","borderColor","fillRect","restore","mouseX","mouseY","inXRange","inYRange","getCenterPoint","tooltipPosition","getRange","axis"],"mappings":"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","sourcesContent":["/*!\n * chartjs-chart-matrix v1.0.0\n * https://chartjs-chart-matrix.pages.dev/\n * (c) 2021 Jukka Kurkela\n * Released under the MIT license\n */\nimport { DatasetController, Element } from 'chart.js';\nimport { isObject } from 'chart.js/helpers';\n\nvar version = \"1.0.0\";\n\nclass MatrixController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const me = this;\n    const meta = me._cachedMeta;\n\n    me.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(rects, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const {xScale, yScale} = me._cachedMeta;\n    const firstOpts = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(mode, rects[start], firstOpts);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = !reset && me.getParsed(i);\n      const x = reset ? xScale.getBasePixel() : xScale.getPixelForValue(parsed.x);\n      const y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(parsed.y);\n      const options = me.resolveDataElementOptions(i, mode);\n      const {width, height, anchorX, anchorY} = options;\n      const properties = {\n        x: anchorX === 'left' ? x : x - width / (anchorX === 'right' ? 1 : 2),\n        y: anchorY === 'top' ? y : y - height / (anchorY === 'bottom' ? 1 : 2),\n        width,\n        height,\n        options\n      };\n      me.updateElement(rects[i], i, properties, mode);\n    }\n\n    me.updateSharedOptions(sharedOptions, mode);\n  }\n\n  draw() {\n    const me = this;\n    const data = me.getMeta().data || [];\n    let i, ilen;\n\n    for (i = 0, ilen = data.length; i < ilen; ++i) {\n      data[i].draw(me._ctx);\n    }\n  }\n}\n\nMatrixController.id = 'matrix';\n\nMatrixController.version = version;\n\nMatrixController.defaults = {\n  dataElementType: 'matrix',\n\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'width', 'height']\n    }\n  },\n  anchorX: 'center',\n  anchorY: 'center'\n};\n\nMatrixController.overrides = {\n  interaction: {\n    mode: 'nearest',\n    intersect: true\n  },\n\n  scales: {\n    x: {\n      type: 'linear',\n      offset: true\n    },\n    y: {\n      type: 'linear',\n      reverse: true\n    }\n  },\n};\n\n/**\n * Helper function to get the bounds of the rect\n * @param {MatrixElement} rect the rect\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the rect\n * @private\n */\nfunction getBounds(rect, useFinalPosition) {\n  const {x, y, width, height} = rect.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n  return {left: x, top: y, right: x + width, bottom: y + height};\n}\n\nfunction limit(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nfunction parseBorderWidth(rect, maxW, maxH) {\n  const value = rect.options.borderWidth;\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = +value.top || 0;\n    r = +value.right || 0;\n    b = +value.bottom || 0;\n    l = +value.left || 0;\n  } else {\n    t = r = b = l = +value || 0;\n  }\n\n  return {\n    t: limit(t, 0, maxH),\n    r: limit(r, 0, maxW),\n    b: limit(b, 0, maxH),\n    l: limit(l, 0, maxW)\n  };\n}\n\nfunction boundingRects(rect) {\n  const bounds = getBounds(rect);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(rect, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b\n    }\n  };\n}\n\nfunction inRange(rect, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const bounds = !rect || (skipX && skipY) ? false : getBounds(rect, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nclass MatrixElement extends Element {\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.width = undefined;\n    this.height = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const options = this.options;\n    const {inner, outer} = boundingRects(this);\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n      ctx.fillStyle = options.borderColor;\n      ctx.fill('evenodd');\n    } else {\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fillRect(inner.x, inner.y, inner.w, inner.h);\n    }\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, width, height} = this.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n\n  tooltipPosition() {\n    return this.getCenterPoint();\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n\nMatrixElement.id = 'matrix';\nMatrixElement.defaults = {\n  backgroundColor: undefined,\n  borderColor: undefined,\n  borderWidth: undefined,\n  anchorX: undefined,\n  anchorY: undefined,\n  width: 20,\n  height: 20\n};\n\nexport { MatrixController, MatrixElement };\n"]},"metadata":{},"sourceType":"module"}